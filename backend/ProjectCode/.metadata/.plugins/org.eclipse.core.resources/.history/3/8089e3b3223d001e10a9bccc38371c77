package com.java.services;

import java.util.ArrayList;

import com.java.businesslogic.Service;
import com.java.entities.Customer;
import com.java.entities.CustomerLogin;
import com.java.entities.Loan;
import com.java.entities.LoanApplication;

import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/customer")
public class CustomerService {
	Service service = new Service();

	@POST
	@Path("/addcustomer")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse<Boolean> addDetails(Customer customer) {
		try {
			boolean flag = service.addDetails(customer);
			return new ServiceResponse<Boolean>("data added",200,flag);
		} catch (Exception e) {
			return new ServiceResponse<Boolean>(e.getMessage(),500,null);
		}
	}
	
	@POST
	@Path("/addloanapplication")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse<Boolean> applyForLoan(LoanApplication loanApplication) {
		try {
			boolean flag = service.applyForLoan(loanApplication);
			return new ServiceResponse<Boolean>("data added",200,flag);
		} catch (Exception e) {
			return new ServiceResponse<Boolean>(e.getMessage(),500,null);
		}
	}
	
	@GET
	@Path("/viewcustomer/{customerId}")
	@Produces(MediaType.APPLICATION_JSON)
	public ServiceResponse<Customer> viewCustomerDetailsById(@PathParam("customerId") int customerId) {
		try {
			Customer customer = service.viewCustomerDetailsById(customerId);
			return new ServiceResponse<Customer>("data found",200,customer);
		} catch (Exception e) {
			return new ServiceResponse<Customer>(e.getMessage(),500,null);
		}
	}
	
	@GET
	@Path("/getapplication/{applicationNo}")
	@Produces(MediaType.APPLICATION_JSON)
	public ServiceResponse<LoanApplication> getLoanApplicationById(@PathParam("applicationNo") int applicationNo) {
		try {
			LoanApplication loanApplication = service.getLoanApplicationById(applicationNo);
			return new ServiceResponse<LoanApplication>("data found",200,loanApplication);
		} catch (Exception e) {
			return new ServiceResponse<LoanApplication>(e.getMessage(),500,null);
		}
	}
	
	@GET
	@Path("/loans")
	@Produces(MediaType.APPLICATION_JSON)
	public ServiceResponse<ArrayList<Loan>> browseLoans(){
		try {
			ArrayList<Loan> loans = service.browseLoans();
			return new ServiceResponse<ArrayList<Loan>>("data found",200,loans);
		} catch (Exception e) {
			return new ServiceResponse<ArrayList<Loan>>(e.getMessage(),500,null);
		}
	}
	
	@GET
	@Path("/deleteapplication/{applicationNo}")
	@Produces(MediaType.APPLICATION_JSON)
	public ServiceResponse<Boolean> deleteApplication(@PathParam("applicationNo") int applicationNo){
		try {
			boolean flag = service.deleteApplication(applicationNo);
			return new ServiceResponse<Boolean>("data found",200,flag);
		} catch (Exception e) {
			return new ServiceResponse<Boolean>(e.getMessage(),500,null);
		}
	}
	
	
	@POST
	@Path("/register")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse<Boolean> register(CustomerLogin login){
		try {
			boolean flag = service.register(login);
			return new ServiceResponse<Boolean>("data added",200,flag);
		} catch (Exception e) {
			return new ServiceResponse<Boolean>(e.getMessage(),500,null);
		}
	}
	
	@GET
	@Path("/login")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse<Integer> login(CustomerLogin login){
		try {
			int p=service.login(login);
			return new ServiceResponse<Integer>("data found",200,p);
		} catch (Exception e) {
			return new ServiceResponse<Integer>(e.getMessage(),500,null);
		}
	}
	
	@POST
	@Path("/update")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public ServiceResponse<Boolean> updateCustomer(Customer customer){
		try {
			boolean flag = service.updateCustomer(customer);
			return new ServiceResponse<Boolean>("data updated",200,flag);
		} catch (Exception e) {
			return new ServiceResponse<Boolean>(e.getMessage(),500,null);
		}
	}

}
